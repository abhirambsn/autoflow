from fastapi import FastAPI, WebSocket
from dotenv import load_dotenv
import os, uuid
from typing import List, Dict
from util.github_handler import GithubHandler
from util.repo_manager import RepositoryManager
from util.infra_generator import InfraGenerator

load_dotenv()

if "GOOGLE_API_KEY" not in os.environ:
    raise ValueError("GOOGLE_API_KEY environment variable is not set.")
if "GITHUB_APP_TOKEN" not in os.environ:
    raise ValueError("GITHUB_APP_TOKEN environment variable is not set.")

app = FastAPI()

GITHUB_APP_TOKEN: str = os.getenv("GITHUB_APP_TOKEN")
BASE_REPO_DIR: str = "/tmp/repos"
PR_TITLE_TEMPLATE: str = "Auto generated Deployment files for {repo_name} by Autoflow"

repo_manager = RepositoryManager(BASE_REPO_DIR)
github_handler = GithubHandler(GITHUB_APP_TOKEN)
infra_generator = InfraGenerator("gemini-2.0-flash")

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    data = await websocket.receive_json()
    repo_url: str = data.get("repo_url")
    repo_owner: str = data.get("repo_owner")
    workflow_type: str = data.get("workflow_type")
    required_files: str = data.get("required_files")
    additional_requirements = data.get("additional_requirements")
    
    branch_name: str = f"autoflow-{repo_owner}-{uuid.uuid4().hex[:8]}"
    repo_name: str = repo_url.split("/")[-1].replace(".git", "")

    try:
        authenticated_repo_url = github_handler.clone_repo_with_github_app(repo_url)
        print(f"Authenticated repo URL: {authenticated_repo_url}")
        print(f"Branch name: {branch_name}")
        print(f"Repo name: {repo_name}")
        repo_path, repo = repo_manager.clone_repo(authenticated_repo_url, branch_name)
        repo_metadata = github_handler.get_repo_metadata(repo_owner, repo_name)
        gh_repo = repo_metadata.pop("repo_obj")

        files: Dict[str, str] = infra_generator.generate_files(
            repo_metadata,
            workflow_type,
            required_files,
            additional_requirements
        )

        repo_manager.write_files(repo_path, files)
        repo_manager.commit_and_push(repo, branch_name, required_files)

        pr = github_handler.create_pull_request(
            gh_repo,
            branch_name,
            PR_TITLE_TEMPLATE.format(repo_name=repo_name),
            "This PR is auto-generated by Autoflow. Please review and merge."
        )

        await websocket.send_json({ "status": "success", "pr_url": pr.html_url })
    except Exception as e:
        await websocket.send_json({ "status": "error", "message": str(e) })
        raise
    finally:
        print(f"Cleaning up repo at {repo_path}")
        repo_manager.cleanup(repo_path)
        await websocket.close()